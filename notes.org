#+TITLE: Music Theory Course for RMA
#+AUTHOR: Matt Hood



* DONE Note picker that is able to illustrate the process of moving from continuous frequency space to discrete notes that work well together
**Why?** Sound is a wilderness of discordance and dissonance. The machinery of tuning, scales, chords is all about finding the 'good notes', the subset of dissonance that is consonance. This exercise gives the student an appreciation of the value of elementary music theory, by experiencing how bad things are without it. This will then be a source of motivation to continue learning.

** The 'inline-js' blocks :noexport:
Support for 'inline-js' may be added via evaluation of the following elisp:
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-src-lang-modes '("inline-js" . javascript))
(defvar org-babel-default-header-args:inline-js
  '((:results . "html")
    (:exports . "results")))
(defun org-babel-execute:inline-js (body _params)
  (format "<script type=\"text/javascript\">\n%s\n</script>" body))
#+END_SRC

#+RESULTS:
: org-babel-execute:inline-js

Source: https://www.reddit.com/r/orgmode/comments/5bi6ku/tip_for_exporting_javascript_source_block_to/

** Implementation

#+begin_export html
<script src="https://unpkg.com/tone@13.8.25/build/Tone.js"></script>

<script src="frequency-resolution-applet.js"></script>

<div id="applet">Test</div>
#+end_export

#+begin_src inline-js :exports both
  let parent = document.getElementById("applet");
  let fra = new FrequencyResolutionApplet(parent, 700, 500, "major scale");
  console.log("1");
#+end_src

*** Open questions
**** Should visual quantization occur on the time axis? Maybe not in the continuous mode? It's a bit jarring when the note doesn't go where you expect without a visual cue that placement is discrete


* Song player
** DONE Accept a shorthand notation
** TODO Tempo, other possible inputs
** TODO Ties, rests
** DONE Notation in presentation, via a div or span
** TODO Use abc.js for note input?
** Easy transposing
** Graphics, title, indicator of playback

* Intervals: Assign an emotional adjective to each interval (or any aural object really) and use the rest of the presentation

Aural Interval objects could be placed inline with text, featuring
- Official term as text
- Student-prescribed adjective
- Student-prescribed colour
- Plays the sound, with a random root note for relative objects
- Real instrument sounds with choice



* Guitar-hero style tapping game to learm rhythms. Allow building of custom levels. Score based on accuracy.


* Word definitions: terms that are defined in the course can be clicked to expand a definition (floating? inline?). This should work recursively.


* Technical notes
** TODO Implement responsive design (via bulma?)
*** TODO Find out how to do it in a predictable way. Viewport feels hacky
*** TODO Handle orientation changes
** TODO Documentation.org for libintuitive
** TODO Readme.org for libintuitive
** TODO allow-audio: fix remove() causing null issues on render
** DONE intuitive-tune-player: replace newline with space
** DONE intuitive-tune-player: accept tempo and transpose arguments
** TODO intuitive-tune-player: accept slot children, like intuitive-aural
** TODO intuitive-keyboard-graphic: more permissive input to 'select' attribute
** DONE intuitive-aural: allow anything inside the tag
** DONE add intuitive-aural changes to presentation
** DONE intuitive-aural: slower tempo for less notes
** DONE frequency-resolution-applet: remove extra buttons
** TODO frequency-resolution-applet: rewrite with svg? Highlight noteheads during playback?
** TODO Create generic play/pause button with optional text

